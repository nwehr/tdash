{"version":3,"sources":["Widget.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Widget","props","useState","name","setName","current","setCurrent","change","setChange","chartData","setChartData","getProfile","useCallback","token","a","axios","get","symbol","resp","data","getQuote","c","o","getCandles","end","moment","unix","start","subtract","i","length","push","x","y","useEffect","localStorage","getItem","clearInterval","window","setInterval","className","Math","round","width","height","margin","style","fill","strokeWidth","color","GetToken","setToken","onSubmit","e","preventDefault","setItem","location","reload","href","type","onChange","currentTarget","value","App","symbolsStr","split","map","trim","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e78afeda.chunk.js","sourcesContent":["import axios from \"axios\"\nimport moment from \"moment\"\nimport React, { useCallback, useEffect, useState } from \"react\"\n\n// @ts-ignore\nimport { XYPlot, LineSeries } from 'react-vis'\n\nexport interface WidgetProps {\n    symbol: string\n}\n\nconst Widget = (props: WidgetProps) => {\n    const [name, setName] = useState(\"\")\n    const [current, setCurrent] = useState(0.0)\n    const [change, setChange] = useState(0.0)\n    const [chartData, setChartData] = useState<any[]>([])\n\n\n    const getProfile = useCallback(async (token: string) => {\n        const resp = await axios.get(`https://finnhub.io/api/v1/stock/profile2?symbol=${props.symbol}&token=${token}`)\n        setName(resp.data.name)\n    }, [props.symbol])\n\n    const getQuote = useCallback(async (token: string) => {\n        const resp = await axios.get(`https://finnhub.io/api/v1/quote?symbol=${props.symbol}&token=${token}`)\n        setCurrent(resp.data.c)\n        setChange(resp.data.c - resp.data.o)\n    }, [props.symbol])\n\n    const getCandles = useCallback(async (token: string) => {\n        const end = moment().unix()\n        const start = moment().subtract(6, 'months').unix()\n\n        const resp = await axios.get(`https://finnhub.io/api/v1/stock/candle?symbol=${props.symbol}&token=${token}&resolution=D&from=${start}&to=${end}`)\n\n        const data = []\n\n        for (let i = 0; i < resp.data.c.length; i++) {\n            data.push({ x: i + 1, y: resp.data.c[i] })\n        }\n\n        setChartData(data)\n    }, [props.symbol])\n\n    useEffect(() => {\n        const token = localStorage.getItem(\"finnhub_api_token\")!\n        getProfile(token)\n\n        getQuote(token)\n\n        clearInterval((window as any)[\"quote_\" + props.symbol]);\n        (window as any)[\"quote_\" + props.symbol] = setInterval(() => {\n            getQuote(token)\n        }, 5000)\n\n        getCandles(token)\n\n        clearInterval((window as any)[\"candles_\" + props.symbol]);\n        (window as any)[\"candles_\" + props.symbol] = setInterval(() => {\n            getCandles(token)\n        }, 5000)\n\n\n    }, [props.symbol, getProfile, getQuote, getCandles])\n\n    return <div className=\"widget\">\n        <div className=\"grid-container\">\n            <div className=\"profile\">\n                <h3>{props.symbol}</h3>\n                <p>{name}</p>\n            </div>\n\n            <div className=\"quote\">\n                <h3>{current}</h3>\n                <p className={change < 0 ? \"red\" : \"green\"}>{Math.round(change * 100) / 100}</p>\n            </div>\n        </div>\n\n        {\n            chartData.length\n                ? <div className=\"chart\">\n                    <XYPlot width={300} height={80} margin={0} style={{ fill: \"none\" }} >\n                        <LineSeries strokeWidth={2} color={chartData[chartData.length - 1].y - chartData[0].y < 0 ? \"#dc322f\" : \"#859900\"} data={chartData} />\n                    </XYPlot>\n                </div>\n                : null\n        }\n    </div>\n}\n\nexport default Widget","import React, { ChangeEvent, FormEvent, useState } from 'react';\nimport Widget from './Widget';\n\nconst GetToken = () => {\n\tconst [token, setToken] = useState(\"\")\n\n\tconst onChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetToken(e.currentTarget.value)\n\t}\n\n\tconst onSubmit = (e: FormEvent<HTMLFormElement>) => {\n\t\te.preventDefault()\n\t\tlocalStorage.setItem(\"finnhub_api_token\", token)\n\t\twindow.location.reload()\n\t}\n\n\treturn <div>\n\t\t<form onSubmit={onSubmit} className=\"token\">\n\t\t\t<label><a href=\"https://finnhub.io/\">Finnhub</a> API Token</label>\n\t\t\t<div><input type=\"text\" onChange={onChange} /></div>\n\t\t\t<div><input type=\"submit\" value=\"Submit\" /></div>\n\t\t</form>\n\t</div>\n}\n\nconst App = () => {\n\tif (!localStorage.getItem(\"finnhub_api_token\")) {\n\t\treturn <GetToken />\n\t}\n\n\tlet symbolsStr = localStorage.getItem(\"finnhub_symbols\")\n\n\tif (!symbolsStr) {\n\t\tlocalStorage.setItem(\"finnhub_symbols\", \"AAPL, NVDA\")\n\t\tsymbolsStr = \"AAPL, NVDA\"\n\t}\n\n\treturn <div className=\"App\">\n\t\t{\n\t\t\tsymbolsStr?.split(\",\").map((symbol: string) => <Widget key={symbol.trim()} symbol={symbol.trim()} />)\n\t\t}\n\t</div>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}