{"version":3,"sources":["GetToken.tsx","Widget.tsx","hooks/useFinnhub.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GetToken","useState","token","setToken","onChange","useCallback","e","currentTarget","value","onSubmit","preventDefault","localStorage","setItem","window","location","reload","className","href","type","Widget","props","symbol","name","setName","current","setCurrent","change","setChange","chartData","setChartData","getProfile","a","axios","get","resp","data","getQuote","c","o","getCandles","end","moment","unix","start","subtract","i","length","push","x","y","useEffect","getItem","clearInterval","setInterval","useFinnhub","Math","round","width","height","margin","style","fill","strokeWidth","color","App","symbolsStr","split","map","trim","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db226655.chunk.js","sourcesContent":["import { ChangeEvent, FormEvent, useState, useCallback } from \"react\"\n\nconst GetToken = () => {\n\tconst [token, setToken] = useState(\"\")\n\n\tconst onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetToken(e.currentTarget.value)\n\t}, [])\n\n\tconst onSubmit = useCallback((e: FormEvent<HTMLFormElement>) => {\n\t\te.preventDefault()\n\t\tlocalStorage.setItem(\"finnhub_api_token\", token)\n\t\twindow.location.reload()\n\t}, [token])\n\n\treturn <div>\n\t\t<form onSubmit={onSubmit} className=\"token\">\n\t\t\t<label><a href=\"https://finnhub.io/\">Finnhub</a> API Token</label>\n\t\t\t<div><input type=\"text\" onChange={onChange} /></div>\n\t\t\t<div><input type=\"submit\" value=\"Submit\" /></div>\n\t\t</form>\n\t</div>\n}\n\nexport default GetToken","import { useFinnhub } from \"./hooks/useFinnhub\"\n\n// @ts-ignore\nimport { XYPlot, LineSeries } from 'react-vis'\n\nexport interface WidgetProps {\n    symbol: string\n}\n\nconst Widget = (props: WidgetProps) => {\n    const { name, current, change, chartData } = useFinnhub(props.symbol)\n\n    return <div className=\"widget\">\n        <div className=\"grid-container\">\n            <div className=\"profile\">\n                <h3>{props.symbol}</h3>\n                <p>{name}</p>\n            </div>\n\n            <div className=\"quote\">\n                <h3>{current}</h3>\n                <p className={change < 0 ? \"red\" : \"green\"}>{Math.round(change * 100) / 100}</p>\n            </div>\n        </div>\n\n        {\n            chartData.length\n                ? <div className=\"chart\">\n                    <XYPlot width={300} height={80} margin={0} style={{ fill: \"none\" }} >\n                        <LineSeries strokeWidth={2} color={chartData[chartData.length - 1].y - chartData[0].y < 0 ? \"#dc322f\" : \"#859900\"} data={chartData} />\n                    </XYPlot>\n                </div>\n                : null\n        }\n    </div>\n}\n\nexport default Widget","import { useCallback, useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport moment from \"moment\"\n\nexport const useFinnhub = (symbol: string) => {\n    const [name, setName] = useState(\"\")\n    const [current, setCurrent] = useState(0.0)\n    const [change, setChange] = useState(0.0)\n    const [chartData, setChartData] = useState<any[]>([])\n\n\n    const getProfile = useCallback(async (token: string) => {\n        const resp = await axios.get(`https://finnhub.io/api/v1/stock/profile2?symbol=${symbol}&token=${token}`)\n        setName(resp.data.name)\n    }, [symbol])\n\n    const getQuote = useCallback(async (token: string) => {\n        const resp = await axios.get(`https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${token}`)\n        setCurrent(resp.data.c)\n        setChange(resp.data.c - resp.data.o)\n    }, [symbol])\n\n    const getCandles = useCallback(async (token: string) => {\n        const end = moment().unix()\n        const start = moment().subtract(6, 'months').unix()\n\n        const resp = await axios.get(`https://finnhub.io/api/v1/stock/candle?symbol=${symbol}&token=${token}&resolution=D&from=${start}&to=${end}`)\n\n        const data = []\n\n        for (let i = 0; i < resp.data.c.length; i++) {\n            data.push({ x: i + 1, y: resp.data.c[i] })\n        }\n\n        setChartData(data)\n    }, [symbol])\n\n    useEffect(() => {\n        const token = localStorage.getItem(\"finnhub_api_token\")!\n        getProfile(token)\n        getQuote(token)\n        getCandles(token)\n\n        clearInterval((window as any)[\"quote_\" + symbol]);\n        (window as any)[\"quote_\" + symbol] = setInterval(() => {\n            getQuote(token)\n        }, 60000)\n\n        clearInterval((window as any)[\"candles_\" + symbol]);\n        (window as any)[\"candles_\" + symbol] = setInterval(() => {\n            getCandles(token)\n        }, 90000)\n\n    }, [symbol, getProfile, getQuote, getCandles])\n\n    return {\n        name\n        , current\n        , change\n        , chartData\n    }\n}","import GetToken from \"./GetToken\"\nimport Widget from \"./Widget\"\n\nconst App = () => {\n\tif (!localStorage.getItem(\"finnhub_api_token\")) {\n\t\treturn <GetToken />\n\t}\n\n\tlet symbolsStr = localStorage.getItem(\"finnhub_symbols\")\n\n\tif (!symbolsStr) {\n\t\tlocalStorage.setItem(\"finnhub_symbols\", \"AAPL, NVDA\")\n\t\tsymbolsStr = \"AAPL, NVDA\"\n\t}\n\n\treturn <div className=\"App\">\n\t\t{\n\t\t\tsymbolsStr?.split(\",\").map((symbol: string) => <Widget key={symbol.trim()} symbol={symbol.trim()} />)\n\t\t}\n\t</div>\n}\n\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}